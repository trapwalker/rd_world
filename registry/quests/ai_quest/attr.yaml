__cls__: AIQuickQuest
_cls: AIQuickQuest
doc    : Квест обучения

first_state: before_respawn
current_state: ~

caption: AI Quest
text: Ai Quest

on_generate: |
    # todo: реализовать метод same_as для проверки похожести квестов
    for q in agent and agent.profile.quests or []:
        if q.status is None:
            raise Cancel("QUEST CANCEL: You already have that unstarted quest: {q!r}")
        if q.status == 'active':
            raise Cancel("QUEST CANCEL: You already have more <<quest.active_count_max>> copies of that quest.")

on_start: |
    quest.route_index = 0
    quest.patrol_target = None
    quest.attacke_target = None
    # log('start_quest!')

states:
    - id: before_respawn
      parent: reg:///registry/quest_states/test/begin
      on_enter: |
          set_timer(name='before_respawn', delay=10)
      on_event: |
          if isinstance(event, OnAppendCar) or (agent.profile._agent_model.car and isinstance(event, OnTimer) and event.name == 'before_respawn'):
              # log('on_event new car for {}'.format(agent.login))
              quest.route_index = 0
              quest.patrol_target = None
              quest.attacke_target = None
              go('patrol')
          elif isinstance(event, OnTimer) and event.name == 'before_respawn':
              set_timer(name='before_respawn', delay=10)

    - id: patrol
      parent: reg:///registry/quest_states/test/begin
      on_enter: |
          car = agent.profile._agent_model.car
          if car:
              quest.patrol_target = quest.get_next_route_point()
              agent.profile._agent_model.car.set_motion(time=event.time, cc=0.3 + random.random() * 0.3, target_point=quest.patrol_target)
              set_timer(name='patrol', delay=3)
          else:
              log('Car for agent {} not found'.format(agent.login))
              go('before_respawn')

      on_event: |
          if isinstance(event, OnTimer) and event.name == 'patrol':
              car = agent.profile._agent_model.car
              if car:
                # Хил по необходимости
                  if car.hp(time=event.time) < 20:
                      quest.use_heal(time=event.time)

                  distance = quest.patrol_target.distance(agent.profile._agent_model.car.position(time=event.time))
                  if distance < 200:
                      go('patrol')
                  else:
                      set_timer(name='patrol', delay=3)
              else:
                  log('Car for agent {} not found'.format(agent.login))
                  go('before_respawn')

          if isinstance(event, OnDie):
              go('before_respawn')

          if isinstance(event, OnAISee):
              if agent.profile._agent_model.is_target(target=event.obj):
                  quest.attacke_target = event.obj
                  go('attacke')

    - id: attacke
      parent: reg:///registry/quest_states/test/begin
      on_enter: |
          car = agent.profile._agent_model.car
          if car:
              agent.profile._agent_model.car.set_motion(time=event.time, cc=0.3 + random.random() * 0.3, target_point=quest.attacke_target.position(time=event.time))
              set_timer(name='attacke', delay=3)
          else:
              log('Car for agent {} not found'.format(agent.login))
              go('before_respawn')

      on_event: |
          if isinstance(event, OnTimer) and event.name == 'attacke':
              car = agent.profile._agent_model.car
              if car:
                  # Преследование
                  target_pos = quest.attacke_target.position(time=event.time)
                  target_pos = target_pos.random_point(target_pos, 50)
                  car.set_motion(time=event.time, cc=0.3 + random.random() * 0.3, target_point=target_pos)

                  # Залповая стрельба
                  for sector in car.fire_sectors:
                      if sector.is_discharge() and sector._test_target_in_sector(target=quest.attacke_target, time=event.time):
                          car.fire_discharge(side=sector.side, time=event.time)

                  # Хил по необходимости
                  if car.hp(time=event.time) < 20:
                      quest.use_heal(time=event.time)

                  set_timer(name='attacke', delay=3)
              else:
                  log('Car for agent {} not found'.format(agent.login))
                  go('before_respawn')

          if isinstance(event, OnDie):
              go('before_respawn')

          if isinstance(event, OnAIOut):
              if event.obj is quest.attacke_target:
                  quest.attacke_target = None
                  vo_list = agent.profile._agent_model.get_all_visible_objects()
                  for vo in vo_list:
                      if agent.profile._agent_model.is_target(target=vo):
                          quest.attacke_target = vo
                          break
                  if quest.attacke_target:
                      go('attacke')
                  else:
                      go('patrol')

    - id: final  # Недостижимое состояние
      parent: reg:///registry/quest_states/final/win